---
id: sdk_nodejs_index
title: Node / Javascript SDK
---

:::caution
The SDK code and documetnation are in ALPHA state and are under heavy development. As a result, the apis are still in
flux, and the documentation may be out of date with the code.
:::

{{#appDescriptionWithNewLines}}
{{{appDescriptionWithNewLines}}}
{{/appDescriptionWithNewLines}}

This SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
- Package version: {{projectVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

:::note
Until y.at is launched publically, the NPM package will not be available. You can contact the Yat team to obtain a copy of the javascript SDK while the project is in Alpha.
:::

### For [Node.js](https://nodejs.org/)

#### npm

```shell
npm install yatjs --save
```

Finally, you need to build the module:

```shell
npm run build
```

### For browser

The library also works in the browser environment via npm and [browserify](http://browserify.org/). After following
the above steps with Node.js and installing browserify with `npm install -g browserify`,
perform the following (assuming *main.js* is your entry file):

```shell
browserify main.js > bundle.js
```

Then include *bundle.js* in the HTML pages.

### Webpack Configuration

Using Webpack you may encounter the following error: "Module not found: Error: Cannot resolve module". In this case you should disable AMD loader. Add/merge
the following section to your webpack config:

```javascript
module: {
  rules: [
    {
      parser: {
        amd: false
      }
    }
  ]
}
```

## Getting Started

Please follow the [installation](#installation) instruction and execute the following JS code:

```javascript
const yat = require('yatjs');
const api = new yat.YatJs();

async function runDemo() {
    console.log(`Yat API calls will be made to ${api.basePath}`);
    api.basePath = 'https://y.at/api;
    console.log(`Changed base path. Now Yat API calls will be made to ${api.basePath}`);
    try {
        let res = await api.login("bob@example.com", "wrong_password");
        console.log("Logged in (Should not see this): ", res);
    } catch (res) {
        console.log(`Could not log in: ${res.error}`);
        try {
            await api.users().getAccount(); // Not logged in, should throw an error
        } catch (res) {
            console.log(`Cannot access account: ${res.error}`);
        }
    }
    try {
        await api.login("test@tari.com", "real_password");
        console.log("Logged in.");
        let account = await api.users().getAccount();
        console.log("Account data:", account);
    } catch (res) {
        console.log(`Could not log in: ${res.error}`);
    }
}

runDemo()
    .then(() => console.log("Bye"))
    .catch(console.error);
```

## Documentation for API Endpoints

Once you have a YatJs instance, all the sub-APIs are accessed through getters, for example, the cart api is available as
`yat.cart()`. A full list of sub-APIs and their methods is:


API accessor | Method |  Description
------------ | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}[{{#lambda.camelcase}}{{baseName}}{{/lambda.camelcase}}()]({{apiDocPath}}{{classname}}.md) | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{>partial_model_doc}}


## Documentation for Authorization

{{^authMethods}}
All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}
{{#last}} Authentication schemes defined for the API:{{/last}}

### {{name}}

{{#isApiKey}}

- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}
{{#isBasicBasic}}
- **Type**: HTTP basic authentication
{{/isBasicBasic}}
{{#isBasicBearer}}
- **Type**: Bearer authentication{{#bearerFormat}} ({{{.}}}){{/bearerFormat}}
{{/isBasicBearer}}
{{/isBasic}}
{{#isOAuth}}

- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}
