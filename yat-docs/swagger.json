{
  "swagger": "2.0",
  "definitions": {
    "AdminUpdateUserParameters": {
      "properties": {
        "email": {
          "description": "Optional: Email",
          "type": "string"
        },
        "first_name": {
          "description": "Optional: First name",
          "type": "string"
        },
        "free_limit": {
          "description": "Optional: Free limit for how many yats the user may purchase",
          "type": "integer",
          "format": "int32"
        },
        "is_active": {
          "description": "Optional: If the user is active, updating to true triggers user activation related events",
          "type": "boolean"
        },
        "last_name": {
          "description": "Optional: Last name",
          "type": "string"
        }
      },
      "required": [
        "user_parameters"
      ]
    },
    "CheckoutCartRequestBody": {
      "properties": {
        "method": {
          "description": "Payment method type",
          "type": "string",
          "enum": [
            "Provider",
            "Card",
            "Default",
            "Free"
          ]
        },
        "payment_method_id": {
          "description": "Use stored payment method (only with `Provider` method)",
          "type": "string",
          "format": "uuid"
        },
        "provider": {
          "description": "Payment provider (required with `Provider` or `Card` methods)\n payment types.",
          "type": "string",
          "enum": [
            "Free",
            "Globee",
            "Stripe"
          ]
        },
        "pubkey": {
          "description": "Optional: The user's public key to associate with this emoji id",
          "type": "string",
          "example": "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"
        },
        "save_payment_method": {
          "description": "Save card payment method.",
          "type": "boolean"
        },
        "set_default": {
          "description": "Set card payment method as default.",
          "type": "boolean"
        },
        "token": {
          "description": "Card payment token (required with `Card` method)",
          "type": "string"
        },
        "tracking_data": {
          "description": "Optional: tracking data",
          "type": "object"
        }
      },
      "required": [
        "method"
      ]
    },
    "Confirm2Fa": {
      "properties": {
        "code": {
          "description": "Two factor authentication code",
          "type": "string"
        },
        "refresh_token": {
          "description": "Refresh token obtained from login request",
          "type": "string"
        }
      },
      "required": [
        "code",
        "refresh_token"
      ]
    },
    "Confirm2FaUpdate": {
      "properties": {
        "code": {
          "description": "Auth code of newly or previously setup 2FA",
          "type": "string"
        }
      },
      "required": [
        "code"
      ]
    },
    "CurrentUser": {
      "properties": {
        "global_scopes": {
          "description": "A list of fine-grained permissions the user may perform.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "adminEmoji:register",
              "adminEmoji:write",
              "cart:show",
              "cart:update",
              "code:delete",
              "code:read",
              "code:write",
              "emojiGroups:delete",
              "emojiGroups:read",
              "emojiGroups:write",
              "order:read",
              "order:readSelf",
              "order:refund",
              "order:refundOverride",
              "order:resendConfirmation",
              "organization:admin",
              "organizationCode:admin",
              "organizationEmoji:list",
              "organizationEmoji:write",
              "organizationList:read",
              "organization:read",
              "organizationUser:admin",
              "organizationUser:read",
              "organization:write",
              "paymentMethod:destroy",
              "paymentMethod:read",
              "paymentMethod:setDefault",
              "refund:read",
              "token:refresh",
              "auth:twoFactor",
              "user:delete",
              "user:deleteSelf",
              "userEmoji:list",
              "userInterest:delete",
              "userInterest:read",
              "userInterest:write",
              "user:list",
              "userPubkeys:list",
              "userPubkeys:write",
              "user:write",
              "user:writeSelf"
            ]
          }
        },
        "organization_roles": {
          "description": "The role this user has in each organisation. Organisations are currently not used, but are reserved for\n future operations.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "enum": [
              "Admin",
              "OrgController",
              "OrgMember",
              "OrgOwner",
              "Super",
              "User"
            ]
          }
        },
        "organization_scopes": {
          "description": "The scopes that are granted to this user for each organisation. Organisations are currently not used, but are\n reserved for future operations.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "adminEmoji:register",
                "adminEmoji:write",
                "cart:show",
                "cart:update",
                "code:delete",
                "code:read",
                "code:write",
                "emojiGroups:delete",
                "emojiGroups:read",
                "emojiGroups:write",
                "order:read",
                "order:readSelf",
                "order:refund",
                "order:refundOverride",
                "order:resendConfirmation",
                "organization:admin",
                "organizationCode:admin",
                "organizationEmoji:list",
                "organizationEmoji:write",
                "organizationList:read",
                "organization:read",
                "organizationUser:admin",
                "organizationUser:read",
                "organization:write",
                "paymentMethod:destroy",
                "paymentMethod:read",
                "paymentMethod:setDefault",
                "refund:read",
                "token:refresh",
                "auth:twoFactor",
                "user:delete",
                "user:deleteSelf",
                "userEmoji:list",
                "userInterest:delete",
                "userInterest:read",
                "userInterest:write",
                "user:list",
                "userPubkeys:list",
                "userPubkeys:write",
                "user:write",
                "user:writeSelf"
              ]
            }
          }
        },
        "pubkeys": {
          "description": "A list of this user's public keys. When yats are deployed to the blockchain, users prove ownership of their\n Yats with digital signatures, proving knowledge of the private keys that \"own\" the yat. In the centralised\n implementation of Yat, the server will custody the users' wallets and private keys, but in other respects the\n ownership model is the same.",
          "type": "array",
          "items": {
            "description": "A hexadecimal representation of a 256-bit public key.",
            "type": "string",
            "example": "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"
          }
        },
        "role": {
          "description": "The role assigned to this user. Roles grant authority to user accounts to perform certain actions.",
          "type": "string",
          "enum": [
            "Admin",
            "OrgController",
            "OrgMember",
            "OrgOwner",
            "Super",
            "User"
          ]
        },
        "user": {
          "description": "The current user's details",
          "properties": {
            "alternate_id": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "deactivated_at": {
              "type": "string",
              "format": "date-time"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "free_limit": {
              "type": "integer",
              "format": "int32"
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "is_active": {
              "type": "boolean"
            },
            "last_name": {
              "type": "string"
            },
            "remaining_free_emoji": {
              "type": "integer",
              "format": "int32"
            },
            "role": {
              "type": "string",
              "enum": [
                "Admin",
                "OrgController",
                "OrgMember",
                "OrgOwner",
                "Super",
                "User"
              ]
            },
            "source": {
              "type": "string"
            },
            "two_factor_auth": {
              "description": "Two factor authentication backend",
              "type": "string",
              "enum": [
                "GoogleAuthenticator",
                null
              ]
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "created_at",
            "free_limit",
            "id",
            "is_active",
            "remaining_free_emoji",
            "role",
            "updated_at"
          ]
        }
      },
      "required": [
        "global_scopes",
        "organization_roles",
        "organization_scopes",
        "pubkeys",
        "role",
        "user"
      ]
    },
    "DisplayOrder": {
      "properties": {
        "created_at": {
          "description": "A UTC timestamp for when this order was initially created.",
          "type": "string",
          "format": "date-time"
        },
        "eligible_for_refund": {
          "description": "Whether an order is eligible for a refund via an admin.",
          "type": "boolean"
        },
        "expires_at": {
          "description": "Checkout carts have a limited time before they expire. This prevents users from blocking inventory from being\n sold to other customers. The expiry time is configurable on the server and is typically 5 minutes.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The unique identifier for this order",
          "type": "string",
          "format": "uuid"
        },
        "misc_refunded_total_in_cents": {
          "description": "The total of miscellaneous refund amounts retirned to the order.",
          "type": "integer",
          "format": "int64"
        },
        "order_items": {
          "description": "The list of individual line items making up this order.",
          "type": "array",
          "items": {
            "properties": {
              "client_fee_in_cents": {
                "description": "The fee attributable to the referral partner, in addition to the nominal unit price, in USD cents.",
                "type": "integer",
                "format": "int32"
              },
              "code_id": {
                "description": "The code associated with this order item for providing a discount.",
                "type": "string",
                "format": "uuid"
              },
              "company_fee_in_cents": {
                "description": "The fee attributable to the service host or company, in addition to the nominal unit price, in USD cents.",
                "type": "integer",
                "format": "int32"
              },
              "created_at": {
                "description": "A UTC timestamp for when this order item was created.",
                "type": "string",
                "format": "date-time"
              },
              "emoji_id": {
                "description": "The emoji id that is being purchased",
                "type": "string",
                "example": "🐱🐉🐋🐴🐵"
              },
              "id": {
                "description": "A unique identifier for this order item",
                "type": "string",
                "format": "uuid"
              },
              "item_type": {
                "description": "The type of order. Current enumerations are EmojiId and Discount",
                "type": "string",
                "enum": [
                  "Discount",
                  "EmojiId"
                ]
              },
              "order_id": {
                "description": "The id of the order this order item",
                "type": "string",
                "format": "uuid"
              },
              "parent_id": {
                "description": "Parent order item's ID, set for discounts and fees",
                "type": "string",
                "format": "uuid"
              },
              "quantity": {
                "description": "The number of items in the line order. For emoji id sales, this should always be one.",
                "type": "integer",
                "format": "int32"
              },
              "refunded_quantity": {
                "type": "integer",
                "format": "int32"
              },
              "unit_price_in_cents": {
                "description": "The nominal, non-discounted price of the item, in USD cents.",
                "type": "integer",
                "format": "int32"
              },
              "updated_at": {
                "description": "A UTC timestamp for when ny field in the order item was modified.",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "client_fee_in_cents",
              "company_fee_in_cents",
              "created_at",
              "id",
              "item_type",
              "order_id",
              "quantity",
              "refunded_quantity",
              "unit_price_in_cents",
              "updated_at"
            ]
          }
        },
        "order_number": {
          "description": "The order number is the last 8 characters of the order's ID for user display purposes.",
          "type": "string"
        },
        "organization_id": {
          "description": "The organization id of the user, if applicable. This will generally be null, unless the purchase is coming via\n a referral programme.",
          "type": "string",
          "format": "uuid"
        },
        "paid_at": {
          "description": "A UTC timestamp for when payment for this order was received. Will be null if no payment has been made yet.",
          "type": "string",
          "format": "date-time"
        },
        "payment_method_data": {
          "description": "Payment method data for payment methods that provide QR code checkout options set via checkout.",
          "type": "object"
        },
        "refunded_total_in_cents": {
          "description": "The total of refund amounts for the order.",
          "type": "integer",
          "format": "int64"
        },
        "seconds_until_expiry": {
          "description": "A convenience field indicating how long before `expires_at` is reached.",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "The order of the status. Orders start in 'Draft' status, then move to 'PendingPayment' and finally, 'Paid',\n unless they are 'Cancelled'.",
          "type": "string",
          "enum": [
            "Cancelled",
            "Draft",
            "Paid",
            "PendingPayment"
          ]
        },
        "total_in_cents": {
          "description": "The sum of all the items in this order, plus fees, in USD cents.",
          "type": "integer",
          "format": "int64"
        },
        "updated_at": {
          "description": "A UTC timestamp for the last time any field in this order was modified.",
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "description": "The details of the user placing this order.",
          "properties": {
            "alternate_id": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "deactivated_at": {
              "type": "string",
              "format": "date-time"
            },
            "email": {
              "type": "string"
            },
            "first_name": {
              "type": "string"
            },
            "free_limit": {
              "type": "integer",
              "format": "int32"
            },
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "is_active": {
              "type": "boolean"
            },
            "last_name": {
              "type": "string"
            },
            "remaining_free_emoji": {
              "type": "integer",
              "format": "int32"
            },
            "role": {
              "type": "string",
              "enum": [
                "Admin",
                "OrgController",
                "OrgMember",
                "OrgOwner",
                "Super",
                "User"
              ]
            },
            "source": {
              "type": "string"
            },
            "two_factor_auth": {
              "description": "Two factor authentication backend",
              "type": "string",
              "enum": [
                "GoogleAuthenticator",
                null
              ]
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "created_at",
            "free_limit",
            "id",
            "is_active",
            "remaining_free_emoji",
            "role",
            "updated_at"
          ]
        },
        "user_id": {
          "description": "The identifier of the user placing this order",
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "created_at",
        "eligible_for_refund",
        "id",
        "misc_refunded_total_in_cents",
        "order_items",
        "order_number",
        "refunded_total_in_cents",
        "status",
        "total_in_cents",
        "updated_at",
        "user",
        "user_id"
      ]
    },
    "DisplayUser": {
      "properties": {
        "alternate_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "deactivated_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "free_limit": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "remaining_free_emoji": {
          "type": "integer",
          "format": "int32"
        },
        "role": {
          "type": "string",
          "enum": [
            "Admin",
            "OrgController",
            "OrgMember",
            "OrgOwner",
            "Super",
            "User"
          ]
        },
        "source": {
          "type": "string"
        },
        "two_factor_auth": {
          "description": "Two factor authentication backend",
          "type": "string",
          "enum": [
            "GoogleAuthenticator",
            null
          ]
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "created_at",
        "free_limit",
        "id",
        "is_active",
        "remaining_free_emoji",
        "role",
        "updated_at"
      ]
    },
    "EditRequest": {
      "properties": {
        "delete": {
          "description": "Optional: hashes of records to delete",
          "type": "array",
          "items": {
            "description": "An emoji record hash. Every emoji id's set of data records is summarized in a Merkle tree. The leaf nodes of that tree are the hash representation of the various concrete emoji id records. This schema describes the hash format for emoji id records.",
            "type": "string",
            "example": "5aaf5eac326102cf208e397f15534f0b89747b2263f47857b1d797275ce7e944"
          }
        },
        "insert": {
          "description": "Optional: list of records to add",
          "type": "array",
          "items": {
            "description": "A data record stored in an emoji record. For ergonomics, the data is represented as a string, irrespective of whether the underlying data is a string or not. Typically, binary data will be encoded as a hexadecimal string, but this is not a guarantee. Refer to the individual record type specifications to determine the form the data will take.",
            "properties": {
              "data": {
                "description": "Category data in text format",
                "type": "string",
                "example": "127.0.0.1"
              },
              "tag": {
                "description": "Category ID as a hex number",
                "type": "string",
                "example": "0x4101"
              }
            },
            "required": [
              "data",
              "tag"
            ]
          }
        },
        "merkle_root": {
          "description": "Optional: merkle root (use WASM to generate)",
          "type": "string",
          "example": "916ea8882cdbe350ca9cec48680e4bf37d75930d8d033bed57128c0809537336"
        },
        "signature": {
          "description": "Optional: signature (use WASM to generate)",
          "type": "string",
          "example": "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"
        }
      }
    },
    "EmojiId": {
      "description": "The emoji id is the key value used in the Emoji ID key-value lookup system. As the name suggests, the id consists solely of emoji characters from a [carefully curated list](/docs/api-ref/#list-users-emoji-ids) ranging in length from one to six characters. Emoji ids are 'owned' in the sense that there is a private-public keypair associated with the id that granted transfer and write-access rights to anyone with knowledge of the emoji id's private key. The primary use of emoji ids is to associate useful related data with the id. This creates a unified identity around that emoji id. For example, someone may associate a website, a twitter handle and a BTC payment address to an emoji id. Those three disparate entities can then be easily accessed using the same emoji id.",
      "type": "string",
      "example": "🐱🐉🐋🐴🐵"
    },
    "ListOfCodeAvailability": {
      "description": "Paginated results.\n<br/>Item description: ",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "activator": {
                "type": "string",
                "enum": [
                  "RedemptionCode",
                  "SecretKey"
                ]
              },
              "available": {
                "type": "integer",
                "format": "int64"
              },
              "code_type": {
                "type": "string",
                "enum": [
                  "Discount",
                  "RandomYat"
                ]
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": "string",
                "format": "date-time"
              },
              "discount_as_percentage": {
                "type": "integer",
                "format": "int32"
              },
              "discount_in_cents": {
                "type": "integer",
                "format": "int32"
              },
              "end_date": {
                "type": "string",
                "format": "date-time"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "max_emojis_per_user": {
                "type": "integer",
                "format": "int32"
              },
              "max_uses": {
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "type": "string"
              },
              "organization_id": {
                "type": "string",
                "format": "uuid"
              },
              "redemption_code": {
                "type": "string"
              },
              "start_date": {
                "type": "string",
                "format": "date-time"
              },
              "total_uses": {
                "type": "integer",
                "format": "int64"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "code",
              "total_uses"
            ]
          }
        },
        "paging": {
          "description": "Paging information",
          "properties": {
            "dir": {
              "type": "string",
              "enum": [
                "Asc",
                "Desc"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32"
            },
            "page": {
              "type": "integer",
              "format": "int32"
            },
            "sort": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "total": {
              "type": "integer",
              "format": "int64"
            }
          },
          "required": [
            "dir",
            "limit",
            "page",
            "sort",
            "tags",
            "total"
          ]
        }
      }
    },
    "ListOfDisplayUser": {
      "description": "Paginated results.\n<br/>Item description: User data",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "description": "User data",
            "properties": {
              "alternate_id": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "deactivated_at": {
                "type": "string",
                "format": "date-time"
              },
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "free_limit": {
                "type": "integer",
                "format": "int32"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "is_active": {
                "type": "boolean"
              },
              "last_name": {
                "type": "string"
              },
              "remaining_free_emoji": {
                "type": "integer",
                "format": "int32"
              },
              "role": {
                "type": "string",
                "enum": [
                  "Admin",
                  "OrgController",
                  "OrgMember",
                  "OrgOwner",
                  "Super",
                  "User"
                ]
              },
              "source": {
                "type": "string"
              },
              "two_factor_auth": {
                "description": "Two factor authentication backend",
                "type": "string",
                "enum": [
                  "GoogleAuthenticator",
                  null
                ]
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "created_at",
              "free_limit",
              "id",
              "is_active",
              "remaining_free_emoji",
              "role",
              "updated_at"
            ]
          }
        },
        "paging": {
          "description": "Paging information",
          "properties": {
            "dir": {
              "type": "string",
              "enum": [
                "Asc",
                "Desc"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32"
            },
            "page": {
              "type": "integer",
              "format": "int32"
            },
            "sort": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "total": {
              "type": "integer",
              "format": "int64"
            }
          },
          "required": [
            "dir",
            "limit",
            "page",
            "sort",
            "tags",
            "total"
          ]
        }
      }
    },
    "ListOfUserInterest": {
      "description": "Paginated results.\n<br/>Item description: User interest",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "description": "User interest",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "emoji_id": {
                "type": "string",
                "example": "🐱🐉🐋🐴🐵"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "user_id": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": [
              "created_at",
              "emoji_id",
              "id",
              "updated_at",
              "user_id"
            ]
          }
        },
        "paging": {
          "description": "Paging information",
          "properties": {
            "dir": {
              "type": "string",
              "enum": [
                "Asc",
                "Desc"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32"
            },
            "page": {
              "type": "integer",
              "format": "int32"
            },
            "sort": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "total": {
              "type": "integer",
              "format": "int64"
            }
          },
          "required": [
            "dir",
            "limit",
            "page",
            "sort",
            "tags",
            "total"
          ]
        }
      }
    },
    "LoginRequest": {
      "properties": {
        "alternate_id": {
          "description": "Alternate identifier",
          "type": "string"
        },
        "email": {
          "description": "Email",
          "type": "string"
        },
        "g_recaptcha_response": {
          "description": "Response from google Recaptcha",
          "type": "string"
        },
        "password": {
          "description": "Required: Password",
          "type": "string"
        }
      },
      "required": [
        "password"
      ]
    },
    "LookupResponse": {
      "properties": {
        "error": {
          "properties": {
            "code": {
              "description": "Error code",
              "type": "string",
              "format": "int64",
              "example": "404"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "code",
            "reason"
          ]
        },
        "result": {
          "description": "Records associated with EmojiID",
          "type": "array",
          "items": {
            "description": "Emoji tags data",
            "properties": {
              "data": {
                "description": "Category data in text or hex encoded formats",
                "type": "string"
              },
              "hash": {
                "description": "Hash identifies record, can be used to delete records",
                "type": "string",
                "example": "5aaf5eac326102cf208e397f15534f0b89747b2263f47857b1d797275ce7e944"
              },
              "tag": {
                "description": "Category as a hex string number",
                "type": "string",
                "example": "0x4001"
              }
            },
            "required": [
              "data",
              "hash",
              "tag"
            ]
          }
        },
        "status": {
          "description": "Response status.\n If true, the requested data will be in the result field, null otherwise",
          "type": "boolean"
        },
        "views_past_month": {
          "description": "Number of times emoji viewed during past month",
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "response",
        "views_past_month"
      ]
    },
    "MagicLinkLoginRequest": {
      "properties": {
        "email": {
          "description": "Email",
          "type": "string"
        },
        "g_recaptcha_response": {
          "description": "Response from google Recaptcha",
          "type": "string"
        },
        "user_id": {
          "description": "User ID",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "MagicLinkLoginResponse": {
      "properties": {
        "message": {
          "description": "Message",
          "type": "string"
        },
        "status": {
          "description": "Status of requested user after completing the login request",
          "type": "string",
          "enum": [
            "Active",
            "RegisteredInactive",
            "RegisteredActive",
            "Inactive"
          ]
        }
      },
      "required": [
        "message",
        "status"
      ]
    },
    "NewUserInterestParameters": {
      "properties": {
        "emoji_id": {
          "description": "Emoji ID to express interest in",
          "type": "string",
          "example": "🐱🐉🐋🐴🐵"
        }
      },
      "required": [
        "emoji_id"
      ]
    },
    "ProxyCallParameters": {
      "properties": {
        "data": {
          "description": "The data to pass through to the proxied service",
          "type": "string"
        },
        "service": {
          "description": "`ProxyService` type",
          "type": "string",
          "enum": [
            "RestPack",
            "Echo",
            "Scraper"
          ]
        }
      },
      "required": [
        "service"
      ]
    },
    "ProxyResult": {
      "properties": {
        "value": {
          "description": "The response from the proxied service as a String",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "Pubkey": {
      "description": "A hexadecimal representation of a 256-bit public key.",
      "type": "string",
      "example": "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"
    },
    "RandomResult": {
      "properties": {
        "result": {
          "description": "Random Emoji IDs",
          "type": "array",
          "items": {
            "properties": {
              "availability": {
                "description": "The availability state of this emoji",
                "type": "string",
                "enum": [
                  "Available",
                  "Taken",
                  "InCart",
                  "ComingSoon",
                  "NoPrice"
                ]
              },
              "available": {
                "description": "Whether the Emoji ID is available for purchase",
                "type": "boolean"
              },
              "discounted_price": {
                "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Discounted price is 0 if the emoji is not available",
                "type": "integer",
                "format": "int32"
              },
              "emoji_id": {
                "description": "Emoji ID in canonical form",
                "type": "string",
                "example": "🐱🐉🐋🐴🐵"
              },
              "price": {
                "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Price is 0 if the emoji is not available",
                "type": "integer",
                "format": "int32"
              },
              "views_past_month": {
                "description": "Total lookups using this API, if someone is viewing this Emoji ID\n using their own self hosted node, it will not be counted here",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "availability",
              "available",
              "discounted_price",
              "emoji_id",
              "price",
              "views_past_month"
            ]
          }
        }
      },
      "required": [
        "result"
      ]
    },
    "RandomYatActivateBody": {
      "properties": {
        "nonce": {
          "description": "Schnorr signature nonce as a hex",
          "type": "string"
        },
        "pubkey": {
          "description": "Public key to authorize usage of a code",
          "type": "string",
          "example": "74dfa32b2c227ca2aa9ce3922a735669835443c1c36596795de1f48dbfaf7b2f"
        },
        "signature": {
          "description": "Schnorr signature as a hex with alternate_id as a challenge",
          "type": "string"
        },
        "tracking_data": {
          "description": "Custom tracking data to be associated with a purchase",
          "type": "object"
        }
      },
      "required": [
        "nonce",
        "pubkey",
        "signature"
      ]
    },
    "RefreshRequest": {
      "properties": {
        "refresh_token": {
          "description": "Refresh token obtained from login request",
          "type": "string"
        }
      },
      "required": [
        "refresh_token"
      ]
    },
    "RegisterUserParameters": {
      "properties": {
        "alternate_id": {
          "description": "Alternate identifier",
          "type": "string"
        },
        "email": {
          "description": "Email address",
          "type": "string"
        },
        "first_name": {
          "description": "Optional: first name",
          "type": "string"
        },
        "g_recaptcha_response": {
          "description": "Response from google Recaptcha",
          "type": "string"
        },
        "last_name": {
          "description": "Optional: last name",
          "type": "string"
        },
        "password": {
          "description": "Optional: password",
          "type": "string"
        },
        "source": {
          "description": "Required when registering with `alternate_id`, source for non custodial user",
          "type": "string"
        }
      }
    },
    "SearchResult": {
      "properties": {
        "alternates": {
          "description": "Alternative Emoji IDs",
          "type": "array",
          "items": {
            "properties": {
              "availability": {
                "description": "The availability state of this emoji",
                "type": "string",
                "enum": [
                  "Available",
                  "Taken",
                  "InCart",
                  "ComingSoon",
                  "NoPrice"
                ]
              },
              "available": {
                "description": "Whether the Emoji ID is available for purchase",
                "type": "boolean"
              },
              "discounted_price": {
                "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Discounted price is 0 if the emoji is not available",
                "type": "integer",
                "format": "int32"
              },
              "emoji_id": {
                "description": "Emoji ID in canonical form",
                "type": "string",
                "example": "🐱🐉🐋🐴🐵"
              },
              "price": {
                "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Price is 0 if the emoji is not available",
                "type": "integer",
                "format": "int32"
              },
              "views_past_month": {
                "description": "Total lookups using this API, if someone is viewing this Emoji ID\n using their own self hosted node, it will not be counted here",
                "type": "integer",
                "format": "int64"
              }
            },
            "required": [
              "availability",
              "available",
              "discounted_price",
              "emoji_id",
              "price",
              "views_past_month"
            ]
          }
        },
        "result": {
          "description": "The specific Emoji ID that the user requests",
          "properties": {
            "availability": {
              "description": "The availability state of this emoji",
              "type": "string",
              "enum": [
                "Available",
                "Taken",
                "InCart",
                "ComingSoon",
                "NoPrice"
              ]
            },
            "available": {
              "description": "Whether the Emoji ID is available for purchase",
              "type": "boolean"
            },
            "discounted_price": {
              "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Discounted price is 0 if the emoji is not available",
              "type": "integer",
              "format": "int32"
            },
            "emoji_id": {
              "description": "Emoji ID in canonical form",
              "type": "string",
              "example": "🐱🐉🐋🐴🐵"
            },
            "price": {
              "description": "Pricing in US cents, e.g. 1024 is 10.24 USD.\n Price is 0 if the emoji is not available",
              "type": "integer",
              "format": "int32"
            },
            "views_past_month": {
              "description": "Total lookups using this API, if someone is viewing this Emoji ID\n using their own self hosted node, it will not be counted here",
              "type": "integer",
              "format": "int64"
            }
          },
          "required": [
            "availability",
            "available",
            "discounted_price",
            "emoji_id",
            "price",
            "views_past_month"
          ]
        }
      },
      "required": [
        "alternates",
        "result"
      ]
    },
    "SuccessResponse": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "TokenResponse": {
      "properties": {
        "access_token": {
          "description": "Access token",
          "type": "string"
        },
        "refresh_token": {
          "description": "Refresh token,  only required for 2FA (???)",
          "type": "string"
        },
        "requires_2fa": {
          "description": "Whether has 2FA enabled or not",
          "type": "string",
          "enum": [
            "GoogleAuthenticator",
            null
          ]
        }
      },
      "required": [
        "access_token",
        "refresh_token"
      ]
    },
    "Update2FAParameters": {
      "properties": {
        "height": {
          "description": "Optional heigth of generated QR code",
          "type": "integer",
          "format": "int32"
        },
        "requires_2fa": {
          "description": "Setup 2FA provider (`GoogleAuthenticator`) for account\n Submit `null` to disable 2FA",
          "type": "string",
          "enum": [
            "GoogleAuthenticator",
            null
          ]
        },
        "width": {
          "description": "Optional width of generated QR code",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Update2FAResponse": {
      "properties": {
        "qr_code_svg": {
          "description": "Secret as QR code in svg image, will be null when code is disabled",
          "type": "string"
        },
        "secret": {
          "description": "Hex encoded secret, will be null when code is disabled",
          "type": "string",
          "example": "0123456789abcdef"
        }
      }
    },
    "UpdateCartRequest": {
      "properties": {
        "items": {
          "description": "New items to add to cart",
          "type": "array",
          "items": {
            "description": "Buy emoji",
            "properties": {
              "emoji_id": {
                "description": "EmojiID to buy",
                "type": "string",
                "example": "🐱🐉🐋🐴🐵"
              },
              "redemption_code": {
                "description": "Redemption Code if applicable",
                "type": "string"
              }
            },
            "required": [
              "emoji_id"
            ]
          }
        },
        "tracking_data": {
          "description": "Tracking data",
          "type": "object"
        }
      },
      "required": [
        "items"
      ]
    },
    "UpdateUserParameters": {
      "properties": {
        "email": {
          "description": "Optional: Email",
          "type": "string"
        },
        "first_name": {
          "description": "Optional: First name",
          "type": "string"
        },
        "last_name": {
          "description": "Optional: Last name",
          "type": "string"
        }
      }
    },
    "UserInterest": {
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "emoji_id": {
          "type": "string",
          "example": "🐱🐉🐋🐴🐵"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "required": [
        "created_at",
        "emoji_id",
        "id",
        "updated_at",
        "user_id"
      ]
    }
  },
  "paths": {
    "/account": {
      "get": {
        "operationId": "getAccount",
        "summary": "Current user account",
        "description": "Displays the currently logged in user account details.",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "update",
        "summary": "Update the currently logged in user",
        "description": "NOTE: user should have scope `UserWriteSelf`",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserParameters"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/account/2fa": {
      "post": {
        "operationId": "update2FA",
        "summary": "Update two factor authentication",
        "description": "Returning String with SVG QR code when enabling 2FA OR empty String in the case of disabling<br/> NOTE: This call does not take effect until code is confirmed via `POST /account/2fa/confirm`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Update2FAResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Update2FAParameters"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/account/2fa/confirm": {
      "post": {
        "operationId": "confirm2FA",
        "summary": "Confirm two factor authentication update",
        "description": "Match 2FA code and commit two factor authentication setting for user account",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Confirm2FaUpdate"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/auth/2fa": {
      "post": {
        "operationId": "twoFactorAuthentication",
        "summary": "Two factor authentication",
        "description": "Complete login flow when user requires 2FA. `refresh_token` obtained from a call to `/token` or `/token/refresh` should be used to complete authentication. **Note:** 2FA token has expiration timeout, which is when expired sensitive operations would require authentication via 2fa once again.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Confirm2Fa"
            }
          }
        ],
        "tags": [
          "User Authentication"
        ]
      }
    },
    "/auth/magic_link": {
      "post": {
        "operationId": "magicLinkLogin",
        "summary": "Generate magic link for login",
        "description": "Will generate and send magic link to provided user's email. Assuming the email address corresponds to a valid user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MagicLinkLoginResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MagicLinkLoginRequest"
            }
          }
        ],
        "tags": [
          "User Authentication"
        ]
      }
    },
    "/auth/token": {
      "post": {
        "operationId": "login",
        "summary": "Login via password",
        "description": "Login via username/password. Will return access and refresh tokens. NOTE: when `requires_2fa` is not empty in response, provided \"refresh_token\" should be used to confirm 2FA code via `POST /auth/2fa`.",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "tags": [
          "User Authentication"
        ]
      }
    },
    "/auth/token/refresh": {
      "post": {
        "operationId": "refreshToken",
        "summary": "Refresh access token",
        "description": "Will return updated access and refresh tokens. NOTE: when `requires_2fa` is not empty in response, provided \"refresh_token\" should be used to confirm 2FA code via `POST /2fa`",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshRequest"
            }
          }
        ],
        "tags": [
          "User Authentication"
        ]
      }
    },
    "/cart": {
      "get": {
        "operationId": "getItems",
        "summary": "Return cart content",
        "description": "NOTE: user should have scope `CartShow`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Cart"
        ]
      },
      "put": {
        "operationId": "replaceItems",
        "summary": "Replace cart items",
        "description": "NOTE: user should have scope `CartUpdate`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCartRequest"
            }
          }
        ],
        "tags": [
          "Cart"
        ]
      },
      "post": {
        "operationId": "addItems",
        "summary": "Update cart items by adding new items to the cart",
        "description": "NOTE: user should have scope `CartUpdate`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCartRequest"
            }
          }
        ],
        "tags": [
          "Cart"
        ]
      },
      "delete": {
        "operationId": "clear",
        "summary": "Remove all items from cart",
        "description": "NOTE: user should have scope `CartUpdate`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Cart"
        ]
      }
    },
    "/cart/checkout": {
      "post": {
        "operationId": "checkout",
        "summary": "Checkout cart with provided payment details",
        "description": "NOTE: user should have scope `CartUpdate`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutCartRequestBody"
            }
          }
        ],
        "tags": [
          "Cart"
        ]
      }
    },
    "/codes": {
      "get": {
        "operationId": "listCodes",
        "summary": "Fetch codes",
        "description": "Return codes with their usage and availability information NOTE: user should have scope `OrganizationCodeAdmin` or `CodeRead`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOfCodeAvailability"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Optional: filter by code type",
            "in": "query",
            "name": "code_type",
            "type": "string",
            "enum": [
              "Discount",
              "RandomYat"
            ]
          },
          {
            "in": "query",
            "name": "dir",
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32"
          },
          {
            "description": "Optional: filter by organization id",
            "in": "query",
            "name": "organization_id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/codes/{code_id}/pubkeys/{pubkey}": {
      "post": {
        "operationId": "addPubkeyForCode",
        "summary": "Add pubkey for code",
        "description": "NOTE: user should have scope `OrganizationCodeAdmin` or `CodeWrite`",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pubkey"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "code_id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "description": "Public key to authorize usage of a code",
            "in": "path",
            "name": "pubkey",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "delete": {
        "operationId": "revokePubkeyForCode",
        "summary": "Revoke pubkey for code",
        "description": "NOTE: user should have scope `OrganizationCodeAdmin` or `CodeWrite`",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pubkey"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "code_id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "description": "Public key to authorize usage of a code",
            "in": "path",
            "name": "pubkey",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/codes/{code_id}/random_yat": {
      "post": {
        "operationId": "activateRandomYatCode",
        "summary": "Use random yat code",
        "description": "Creates cart with random yat generated according to pattern with applied discount",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayOrder"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "code_id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RandomYatActivateBody"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/emoji": {
      "get": {
        "operationId": "emoji_list",
        "summary": "List of supported emoji characters",
        "description": "Result is an array of emojis `[\"🍗\",\"🌈\"]`",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Emoji"
        ]
      }
    },
    "/emoji_id": {
      "get": {
        "operationId": "list",
        "summary": "List user's emoji Ids",
        "description": "If no parameters provided will return all emojis of current user. When `user_id` or `organization_id` specified will return emojis owned by specified user or organization, requires Admin or organization power user access. Result is an array of emoji ids in display format (i.e. with all skin tone modifiers applied) `[\"🤟🏾🍗👽👻\",\"🌈👍🏿💯\"]`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmojiId"
              }
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Lookup emojis owned by `organization_id`,\n requires organization power user role",
            "in": "query",
            "name": "organization_id",
            "type": "string",
            "format": "uuid"
          },
          {
            "description": "Lookup emojis owned by `user_id`,\n requires Admin role",
            "in": "query",
            "name": "user_id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "tags": [
          "Emoji ID"
        ]
      }
    },
    "/emoji_id/random": {
      "get": {
        "operationId": "random",
        "summary": "Return random Emoji",
        "description": "Returns price, availability and other information for random emoji",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RandomResult"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Emoji"
        ]
      }
    },
    "/emoji_id/search": {
      "get": {
        "operationId": "search",
        "summary": "Search for EmojiID",
        "description": "Returns price, availability and other information on emoji and its alternates (similar EmojiIDs that are currently available)",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResult"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Emoji ID in percent url-encoded form",
            "in": "query",
            "name": "emoji_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Redemption code",
            "in": "query",
            "name": "redemption_code",
            "type": "string"
          }
        ],
        "tags": [
          "Emoji ID"
        ]
      }
    },
    "/emoji_id/{emoji_id}": {
      "get": {
        "operationId": "lookup",
        "summary": "Lookup EmojiId",
        "description": "Will filter and return data from supplied tags, If tags filter is not supplied will return all tags attached. It will also try to get views for the past month, if not available will return -1. This method is called when a user wants to look up an Emoji ID's records such as a crypto address or a redirect",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LookupResponse"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "emoji_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma-separated list of tags to display, skip it to display all, e.g. `?tags=0x0001,0x1001`",
            "in": "query",
            "name": "tags",
            "type": "string"
          }
        ],
        "tags": [
          "Emoji ID"
        ]
      },
      "patch": {
        "operationId": "edit",
        "summary": "Edit EmojiId",
        "description": "Add and remove records in EmojiId, update merkle_root and signature too. Access notes: user expected to own the emoji's pubkey, have Admin role or be power member of organization if pubkey belongs to organization, otherwise operation will fail.",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {}
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "emoji_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditRequest"
            }
          }
        ],
        "tags": [
          "Emoji ID"
        ]
      }
    },
    "/proxy": {
      "post": {
        "operationId": "callProxy",
        "summary": "Calls a pre-defined proxy service with the provided data",
        "description": "Returns the response from the proxied service as a string",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProxyResult"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProxyCallParameters"
            }
          }
        ],
        "tags": [
          "Proxy"
        ]
      }
    },
    "/pubkeys": {
      "get": {
        "operationId": "getPubkeys",
        "summary": "Retrieve pubkeys",
        "description": "Retrieves pubkeys owned by currently authenticated user. This call expects empty body.",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pubkey"
              }
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Key Management"
        ]
      },
      "post": {
        "operationId": "createWallet",
        "summary": "Generate custodial wallet",
        "description": "Generates custodial wallet with pubkey for currently authenticated user. This call expects empty body.",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pubkey"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "tags": [
          "Key Management"
        ]
      }
    },
    "/pubkeys/{pubkey}": {
      "post": {
        "operationId": "addPubkey",
        "summary": "Add pubkey for current user",
        "description": "This call expects empty body",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pubkey"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "pubkey",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Key Management"
        ]
      }
    },
    "/user_interests": {
      "get": {
        "operationId": "getInterestedUsers",
        "summary": "Returns a paginated list of user interest records associated with the user",
        "description": "NOTE: user should have scope `UserInterestRead`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOfUserInterest"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "dir",
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string"
          }
        ],
        "tags": [
          "User Interest"
        ]
      },
      "post": {
        "operationId": "registerInterest",
        "summary": "Create new interest in emoji to be notified when available",
        "description": "NOTE: user should have scope `UserInterestWrite`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInterest"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserInterestParameters"
            }
          }
        ],
        "tags": [
          "User Interest"
        ]
      }
    },
    "/user_interests/{emoji_id}": {
      "get": {
        "operationId": "getUserInterestForYat",
        "summary": "Given an EmojiId returns information about the user interest if a record exists for this user",
        "description": "NOTE: user should have scope `UserInterestRead`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInterest"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "emoji_id",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Interest"
        ]
      },
      "delete": {
        "operationId": "deleteUserInterest",
        "summary": "Destroys the user interest preventing this Emoji ID's notification emails from being sent for this user",
        "description": "NOTE: user should have scope `UserInterestDelete`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserInterest"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "emoji_id",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "User Interest"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "getAllUsers",
        "summary": "List users",
        "description": "NOTE: user should have scope `UserList`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOfDisplayUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "dir",
            "type": "string",
            "enum": [
              "Asc",
              "Desc"
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "createUser",
        "summary": "Register a User",
        "description": "Create a user and a custodial wallet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUserParameters"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "operationId": "delete",
        "summary": "Delete a user",
        "description": "NOTE: user should have scope `UserDeleteSelf` if deleting themselves, `UserDelete` is needed for other users",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "updateUser",
        "summary": "Update a user as an admin",
        "description": "NOTE: user should have scope `UserWrite`",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DisplayUser"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUpdateUserParameters"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user_id}/pubkeys": {
      "get": {
        "operationId": "getPubkeysForUser",
        "summary": "Retrieve pubkeys by user_id",
        "description": "NOTE: user should have scope `UserPubkeyList`",
        "security": [
          {
            "JWT": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pubkey"
              }
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "tags": [
          "Key Management"
        ]
      }
    },
    "/users/{user_id}/pubkeys/{pubkey}": {
      "post": {
        "operationId": "addPubkeyForUser",
        "summary": "Add pubkey for user by user_id",
        "description": "NOTE: user should have scope `UserPubkeyWrite` This call expects empty body",
        "security": [
          {
            "JWT": []
          },
          {
            "two_factor": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Pubkey"
            }
          },
          "400": {
            "description": "Bad request: Request body or parameters are not in the expected format."
          },
          "401": {
            "description": "Unauthorized: Access token not found or invalid."
          },
          "422": {
            "description": "Unprocessable Entity: Duplicate record."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "parameters": [
          {
            "description": "Public key to add",
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "`user_id` to grant public key ownership to",
            "in": "path",
            "name": "pubkey",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "tags": [
          "Key Management"
        ]
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "name": "Authorization",
      "type": "apiKey",
      "in": "header",
      "description": "Use format `Bearer TOKEN`"
    },
    "two_factor": {
      "name": "Authorization",
      "type": "apiKey",
      "in": "header",
      "description": "Optional: JWT token in `Bearer TOKEN` with 2FA scope"
    }
  },
  "tags": [
    {
      "name": "User Authentication",
      "description": "From a user experience standpoint, we want encourage the use of magic links.<br/>\n                1. Users request a magic link <br/>\n                2. If 2FA is enabled submit proceed to 2FA."
    },
    {
      "name": "Cart",
      "description": "Cart management endpoints"
    },
    {
      "name": "Emoji",
      "description": "Emoji endpoints. Endpoints to interact with the supported Emoji character sets."
    },
    {
      "name": "Emoji ID",
      "description": "Endpoints for interacting and managing your emoji ids. Endpoints that result in data modification require authentication and the necessary permissions (or scopes). The most common endpoint will be a lookup, i.e. `/emoji_id/{emoji_id}` and does not require authorization, this is when a user wants to get records associated with an Emoji ID."
    },
    {
      "name": "User Interest",
      "description": "User Interest endpoints. Endpoints for users to express interest in Emoji IDs."
    },
    {
      "name": "Users",
      "description": "User Management. Only applicable for users with custodial wallets."
    },
    {
      "name": "Key Management",
      "description": "Manage a user's public keys"
    }
  ],
  "info": {
    "version": "0.1.133",
    "title": "Emoji ID API server",
    "description": "Emoji ID is a directory service that associates almost any type of structured data with a short, memorable identifier the emoji id."
  }
}
