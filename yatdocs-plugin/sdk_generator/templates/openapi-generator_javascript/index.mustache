{{>licenseInfo}}


import ApiClient from './ApiClient';
{{#models}}import {{#model}}{{classFilename}}{{/model}} from './{{#modelPackage}}{{modelPackage}}/{{/modelPackage}}{{importPath}}';
{{/models}}
{{#apiInfo}}{{#apis}}import {{importPath}} from './{{#apiPackage}}{{apiPackage}}/{{/apiPackage}}{{importPath}}';
{{/apis}}{{/apiInfo}}

{{#emitJSDoc}}/**{{#unescapedAppDescription}}
* {{{unescapedAppDescription}}}.
* {{/unescapedAppDescription}}
* The <code>{{apiFolder}}</code> module provides the {{moduleName}} class that acts as a container for all the sub-APIs.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* const yat = require('{{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}{{apiFolder}}');
* const api = new yat.{{moduleName}}(); // api is the main Yat API container
* api.basePath = 'http://{{host}}'; // You can override the host URL
* try {
*     await api.login("test@example.com", "real_password");  // All API calls return promises
*     console.log("Logged in.");
*     let res = await api.subApi().doSomething(); // Each sub-API is available via a getter
*    ...
* }
* </pre>
* @module {{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}{{apiFolder}}
* @version {{projectVersion}}
*/{{/emitJSDoc}}

{{=< >=}}
class <moduleName> {
    constructor() {
        this.client = new ApiClient();
    }

    login(username, password) {
        if (this.client.loggedIn()) {
            return;
        }
        let req = {password};
        if (username.includes('@')) {
            req.email = username;
        } else {
            req.alternate_id = username;
        }
        const body = LoginRequest.constructFromObject(req);
        return this.userAuthentication().login(body).then(res => {
            this.client.authentications['JWT'].apiKey = res.access_token;
            this.client.authentications['JWT'].requires2Fa = res.requires_2fa;
            this.client.setToken(res);
            return res;
        }).catch(res => {
            throw res.body;
        });
    }


    confirm_2fa(code) {
        if (!this.client.loggedIn()) {
            throw "Requires regular login before confirming 2FA code";
        }
        const refresh_token = this.client.getRefreshToken()
        const req = {code, refresh_token};
        const body = Confirm2Fa.constructFromObject(req);
        return this.userAuthentication().twoFactorAuthentication(body).then(res => {
            this.client.authentications['JWT'].apiKey = res.access_token;
            this.client.authentications['JWT'].requires2Fa = res.requires_2fa;
            this.client.setToken(res);
            return res;
        }).catch(res => {
            throw res.body;
        });
    }

    isLoggedIn() {
        return this.client.loggedIn()
    }

    logout() {
        return this.client.logout()
    }

    get basePath() {
        return this.client.basePath;
    }

    set basePath(url) {
        this.client.basePath = url;
    }

    <#apiInfo><#apis>
    <#emitJSDoc>/**
    * Access to the <baseName> API.
    */</emitJSDoc>
    <#lambda.camelcase><baseName></lambda.camelcase>() {
        // Lazily create the <baseName> api
        if (!this.<#lambda.camelcase><baseName></lambda.camelcase>Instance) {
            this.<#lambda.camelcase><baseName></lambda.camelcase>Instance = new <importPath>(this.client);
        }
        return this.<#lambda.camelcase><baseName></lambda.camelcase>Instance;
    }
    </apis></apiInfo>

}
<={{ }}=>

export {
    {{#emitJSDoc}}/**
    * The User-facing API class.
    */{{/emitJSDoc}}
    {{moduleName}},

    {{=< >=}}
    <#emitJSDoc>/**
     * The ApiClient constructor.
     * @property {module:<#invokerPackage><invokerPackage>/</invokerPackage>ApiClient}
     */</emitJSDoc>
    ApiClient<#models>,

    <#emitJSDoc>/**
     * The <importPath> model constructor.
     * @property {module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><importPath>}
     */</emitJSDoc>
    <importPath></models>
};<={{ }}=>
