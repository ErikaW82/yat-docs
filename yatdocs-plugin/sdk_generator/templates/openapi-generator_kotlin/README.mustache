---
id: sdk_kotlin_index
title: Kotlin SDK
---

:::caution
The SDK code and documentation are in ALPHA state and are under heavy development. As a result, the apis are still in
flux, and the documentation may be out of date with the code.
:::

{{#appDescriptionWithNewLines}}
{{{appDescriptionWithNewLines}}}
{{/appDescriptionWithNewLines}}

This SDK is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Requires

{{#jvm}}
* Kotlin 1.3.61
* Gradle 4.9
{{/jvm}}
{{#multiplatform}}
* Kotlin 1.3.50
{{/multiplatform}}

## Installation

:::note
Until y.at is launched publically, the dependency will not be available on public Maven repositories. You can contact the Yat team to obtain a copy of the Kotlin SDK while the project is in Alpha.
:::

## Build

{{#jvm}}
First, create the gradle wrapper script:

```
gradle wrapper
```

Then, run:

{{/jvm}}
```
./gradlew check assemble
```

This runs all tests and packages the library.

## Configuring the SDK 

### Base URL

You can set the base URL for the API through the static property `ApiClient.baseUrl`.

```kotlin
import com.yatlabs.yat.infrastructure.ApiClient

fun setup() {
    ApiClient.baseUrl = "https://y.at/api"
}
```

### Token Storage

When you authenticate with the Yat API, you will receive a pair of tokens: an access token and a refresh token.

```kotlin
import com.yatlabs.yat.apis.UserAuthenticationApi
import com.yatlabs.yat.models.LoginRequest

fun main() {
    val tokenPair = UserAuthenticationApi.shared.login(
        LoginRequest(
            email = email,
            password = password
        )
    )
    println("Access token: ${tokenPair.accessToken}")
    println("Refresh token: ${tokenPair.refreshToken}")
}
```

Yat Kotlin SDK manages the storage of your token pair and refreshes the access token when it expires. Tokens are stored in the memory by default. If you would like to override this behavior and manage the storage of the tokens yourself, override the `com.yatlabs.yat.infrastructure.TokenStorage` interface, and pass an instance to the `ApiClient` as in the Android example below.

```kotlin
import android.content.SharedPreferences
import com.yatlabs.yat.infrastructure.ApiClient
import com.yatlabs.yat.infrastructure.TokenStorage

class SharedPrefsTokenStorage(prefs: SharedPreferences): TokenStorage {

    override var accessToken: String?
        get() = prefs.getString("access_token", null)
        set(value) = prefs.edit().run {
            putString("access_token", value)
            apply()
        }

    override var refreshToken: String?
        get() = prefs.getString("refresh_token", null)
        set(value) = prefs.edit().run {
            putString("refresh_token", value)
            apply()
        }

}

fun setup() {
    ApiClient.baseUrl = "https://y.at/api"
    ApiClient.tokenStorage = SharedPrefsTokenStorage(prefs = appSharedPrefs)
}

```

### Logging

You can change the logging level for the HTTP requests by setting the `ApiClient.logLevel` static property.

```kotlin
import com.yatlabs.yat.infrastructure.ApiClient
import okhttp3.logging.HttpLoggingInterceptor


fun setup() {
    ApiClient.logLevel = HttpLoggingInterceptor.Level.BODY
}
```

Logging levels are as below:

| Log Level | Description |
|-----------|-------------|
| `NONE` | No logs. |
| `BASIC` | Logs request and response lines.   |
| `HEADERS` | Logs request and response lines and their respective headers. |
| `BODY` | Logs request and response lines and their respective headers and bodies (if present). |

## Getting Started

Please follow the [installation](#installation) instruction and execute the following Kotlin code:

```kotlin
import com.yatlabs.yat.infrastructure.ApiClient
import com.yatlabs.yat.apis.*
import com.yatlabs.yat.models.*

fun runDemo() {
    println("Yat API calls will be made to ${ApiClient.baseUrl}")
    ApiClient.baseUrl = "https://y.at/api"
    println("Changed base path. Now Yat API calls will be made to ${ApiClient.baseUrl}");

    try {
        val res = UserAuthenticationApi.shared.login(
            LoginRequest(
                email = "bob@example.com",
                password = "wrong_password"
            )
        )
        println("Logged in (Should not see this): $res")
    } catch (exception: Exception) {
        println("Could not login: ${exception.message}")
        try {
            UsersApi.shared.getAccount() // Not logged in, should throw an error
        } catch (exception: Exception) {
            println("Cannot access account: ${exception.message}");
        }
    }

    try {
        UserAuthenticationApi.shared.login(
            LoginRequest(
                email = "test@yatlabs.com",
                password = "real_password"
            )
        )
        println("Logged in.")
        val account = UsersApi.shared.getAccount()
        println("Account data: $account")
    } catch (exception: Exception) {
        println("Could not log in: ${exception.message}");
    }
}

fun main() {
    runDemo()
    println("Bye")
}
```

{{#generateApiDocs}}
## Documentation for API Endpoints

All paths are relative to the API base URL, which is set through the `ApiClient.baseUrl` static property as previously described.

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}[{{classname}}]({{apiDocPath}}{{classname}}.md) | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationIdLowerCase}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{{summary}}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

{{/generateApiDocs}}

{{#generateModelDocs}}
## Documentation for Models

{{>partial_model_doc}}
{{/generateModelDocs}}

<a name="documentation-for-authorization"></a>{{! TODO: optional documentation for authorization? }}

## Documentation for Authorization

{{^authMethods}}
All endpoints do not require authorization.
{{/authMethods}}
{{#authMethods}}
{{#last}}
Authentication schemes defined for the API:
{{/last}}
{{/authMethods}}
{{#authMethods}}

### {{name}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}